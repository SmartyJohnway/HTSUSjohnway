{
  "version": 3,
  "sources": ["../../app/TariffHTSUSearcher/netlify/functions/usitc-proxy.ts"],
  "sourceRoot": "/tmp/tmp-3206-h3eYXiffnYec",
  "sourcesContent": ["import type { Handler } from \"@netlify/functions\";\n\nconst USITC_API_URL = \"https://datawebws.usitc.gov/dataweb/api/v2/report2/runReport\";\n\nexport const handler: Handler = async (event) => {\n  if (event.httpMethod !== \"POST\") {\n    return {\n      statusCode: 405,\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ error: \"Method Not Allowed\" }),\n    };\n  }\n\n  const apiKey = process.env.DATAWEB_API_TOKEN;\n  if (!apiKey) {\n    return {\n      statusCode: 500,\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ error: \"API token is not configured\" }),\n    };\n  }\n\n  try {\n    const response = await fetch(USITC_API_URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${apiKey}`,\n      },\n      body: event.body,\n    });\n\n    const text = await response.text();\n\n    // Check for non-JSON responses which can happen on errors\n    if (!response.headers.get(\"content-type\")?.includes(\"application/json\")) {\n       // If USITC returns a non-json error (like HTML), forward it but with an appropriate status\n      return {\n        statusCode: response.status,\n        headers: { \"Content-Type\": \"text/plain\" },\n        body: `Received non-JSON response from USITC API: ${text}`\n      }\n    }\n    \n    return {\n      statusCode: response.status,\n      headers: {\n        \"content-type\": \"application/json\",\n        \"cache-control\": \"no-store\",\n      },\n      body: text,\n    };\n  } catch (err: any) {\n    return {\n      statusCode: 500,\n      body: JSON.stringify({ error: \"Proxy error\", details: err.message }),\n    };\n  }\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,IAAM,gBAAgB;AAEf,IAAM,UAAmB,OAAO,UAAU;AAC/C,MAAI,MAAM,eAAe,QAAQ;AAC/B,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,MAC9C,MAAM,KAAK,UAAU,EAAE,OAAO,qBAAqB,CAAC;AAAA,IACtD;AAAA,EACF;AAEA,QAAM,SAAS,QAAQ,IAAI;AAC3B,MAAI,CAAC,QAAQ;AACX,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,MAC9C,MAAM,KAAK,UAAU,EAAE,OAAO,8BAA8B,CAAC;AAAA,IAC/D;AAAA,EACF;AAEA,MAAI;AACF,UAAM,WAAW,MAAM,MAAM,eAAe;AAAA,MAC1C,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,iBAAiB,UAAU,MAAM;AAAA,MACnC;AAAA,MACA,MAAM,MAAM;AAAA,IACd,CAAC;AAED,UAAM,OAAO,MAAM,SAAS,KAAK;AAGjC,QAAI,CAAC,SAAS,QAAQ,IAAI,cAAc,GAAG,SAAS,kBAAkB,GAAG;AAEvE,aAAO;AAAA,QACL,YAAY,SAAS;AAAA,QACrB,SAAS,EAAE,gBAAgB,aAAa;AAAA,QACxC,MAAM,8CAA8C,IAAI;AAAA,MAC1D;AAAA,IACF;AAEA,WAAO;AAAA,MACL,YAAY,SAAS;AAAA,MACrB,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,iBAAiB;AAAA,MACnB;AAAA,MACA,MAAM;AAAA,IACR;AAAA,EACF,SAAS,KAAU;AACjB,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,OAAO,eAAe,SAAS,IAAI,QAAQ,CAAC;AAAA,IACrE;AAAA,EACF;AACF;",
  "names": []
}
